<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedColorsHeadingText" xml:space="preserve">
    <value>Advanced Colors</value>
  </data>
  <data name="AdvancedColorsText" xml:space="preserve">
    <value>Colors are auto generated until you edit them.</value>
  </data>
  <data name="AdvancedLinkTextAdvanced" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="AdvancedLinkTextHide" xml:space="preserve">
    <value>Hide</value>
  </data>
  <data name="AllText" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="CancelButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChangedText" xml:space="preserve">
    <value>Changed</value>
  </data>
  <data name="ColorsTabText" xml:space="preserve">
    <value>Colors</value>
  </data>
  <data name="ConfirmationText" xml:space="preserve">
    <value>Confirmation</value>
  </data>
  <data name="DeveloperTabText" xml:space="preserve">
    <value>Developer</value>
  </data>
  <data name="FinishButtonText" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="RefreshButtonTooltip" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="InstructionalText" xml:space="preserve">
    <value>Use this style across multiple forms, by selecting it in your form's properties.</value>
  </data>
  <data name="LearnMoreLinkText" xml:space="preserve">
    <value>Learn more</value>
  </data>
  <data name="NoColorsFoundText" xml:space="preserve">
    <value>No colors found</value>
  </data>
  <data name="ResetAllAdvancedColorsMultipleConfirmationMessageText" xml:space="preserve">
    <value>Are you sure you want to reset {0} colors you have changed?</value>
  </data>
  <data name="ResetAllAdvancedColorsSingularConfirmationMessageText" xml:space="preserve">
    <value>Are you sure you want to reset 1 color you have changed?</value>
  </data>
  <data name="ResetAllText" xml:space="preserve">
    <value>Reset All</value>
  </data>
  <data name="ResetButtonText" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="SearchAllColorsText" xml:space="preserve">
    <value>Search all colors</value>
  </data>
  <data name="StyleProfileErrorEmptyName" xml:space="preserve">
    <value>Enter a name</value>
  </data>
  <data name="StyleProfileErrorLongName" xml:space="preserve">
    <value>Name exceeds 200 characters</value>
  </data>
  <data name="StyleProfileErrorNameExists" xml:space="preserve">
    <value>Name already in use</value>
  </data>
  <data name="StyleProfileErrorNameWithInvalidCharacters" xml:space="preserve">
    <value>Remove special characters</value>
  </data>
  <data name="StyleProfileName" xml:space="preserve">
    <value>My Style Profile</value>
  </data>
  <data name="StyleProfileNameNotAllowed" xml:space="preserve">
    <value>The Style Profile name is not allowed</value>
  </data>
  <data name="StyleProfileNameWatermark" xml:space="preserve">
    <value>Enter Style Profile Name</value>
  </data>
  <data name="StyleProfileUrlFormatError" xml:space="preserve">
    <value>Please provide a valid file URL for all linked files</value>
    <comment>An end user should never see this message, as it should be validated client side and pass validation there. It is possibly due to an XSS attack, so we don't want to give out too much information about the reason of the failure.</comment>
  </data>
  <data name="SelectPreviewFormButtonText" xml:space="preserve">
    <value>{0} ...</value>
  </data>
  <data name="SelectPreviewFormTooltip" xml:space="preserve">
    <value>Select a form to preview this style profile</value>
    <comment>Tooltip of the toolbar button used to select an alternate preview form for the current edited style profile</comment>
  </data>
  <data name="SelectPreviewFormHeader" xml:space="preserve">
    <value>Select a Preview Form</value>
    <comment>Header for the category browser dialog used to select a preview form for the style profile.</comment>
  </data>
  <data name="ResetPreviewFormButtonText" xml:space="preserve">
    <value>Reset to Default Form</value>
    <comment>Resets preview form to use default form</comment>
  </data>
    <data name="BrowsePreviewFormText" xml:space="preserve">
    <value>Browse...</value>
    <comment>Browse for preview form</comment>
  </data>
</root>
