<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddConditionalFormatting" xml:space="preserve">
    <value>Add Conditional Formatting</value>
  </data>
  <data name="AvailableOptions" xml:space="preserve">
    <value>Context Browser</value>
  </data>
  <data name="ClearPropertyValueConfirmation" xml:space="preserve">
    <value>Are you sure you would like to clear the selected property value?</value>
  </data>
  <data name="ConditionalStyle" xml:space="preserve">
    <value>Conditional Style</value>
  </data>
  <data name="ConditionalStylingResetText" xml:space="preserve">
    <value>Are you sure you would like to remove the conditional styles?</value>
  </data>
  <data name="ControlDependenciesWarningMsg" xml:space="preserve">
    <value>The control has the following dependencies, which will be rendered invalid upon removal of the control:&lt;br/&gt;&lt;br/&gt;{0}&lt;br/&gt;Are you sure you want to remove the selected control?</value>
  </data>
  <data name="ControlExpressionResetText" xml:space="preserve">
    <value>Are you sure you would like to remove the control's expression?</value>
  </data>
  <data name="CustomStyleResetText" xml:space="preserve">
    <value>Are you sure you would like to remove the custom styles?</value>
  </data>
  <data name="DuplicateControlNameExistsMsg" xml:space="preserve">
    <value>A control with the same name already exists.</value>
  </data>
  <data name="DuplicateViewNameExistsMsg" xml:space="preserve">
    <value>A control on a View cannot have the same name as the View.</value>
  </data>
  <data name="DuplicateFormNameExistsMsg" xml:space="preserve">
    <value>A control on a Form cannot have the same name as the Form.</value>
  </data>
  <data name="EditConditionalFormatting" xml:space="preserve">
    <value>Edit Conditional Formatting</value>
  </data>
  <data name="InvalidConditionalStyles" xml:space="preserve">
    <value>There are invalid conditional styles that need to be reconfigured before you can continue.</value>
  </data>
  <data name="InvalidControlConditionalStyle" xml:space="preserve">
    <value>The conditional style '{0}' for the '{1}' control, is incorrectly configured.</value>
  </data>
  <data name="InvalidControlConditionalStyles" xml:space="preserve">
    <value>There are invalid conditional styles configured for {0} control.</value>
  </data>
  <data name="InvalidRuleCondition" xml:space="preserve">
    <value>The condition on the '{0}' ({1}) rule, is incorrectly configured.</value>
  </data>
  <data name="ItemsRequired" xml:space="preserve">
    <value>Type text and/or drop multiple fields</value>
  </data>
  <data name="InsertTableText" xml:space="preserve">
    <value>Insert Table</value>
    <comment>this is the title of a pop up box which allows the user to configure inserting a table onto a View/Form. [designtime]</comment>
  </data>
  <data name="EnableListViewEditingLabel" xml:space="preserve">
    <value>List Editing</value>
  </data>
  <data name="LabelPositionText" xml:space="preserve">
    <value>Label Position</value>
  </data>
  <data name="LabelSuffixText" xml:space="preserve">
    <value>Colon suffix (":")</value>
  </data>
  <data name="InsertLayoutTableText" xml:space="preserve">
    <value>Create Layout Table</value>
  </data>
  <data name="ListViewEditingOptionLabel" xml:space="preserve">
    <value>Insert the Add/Edit area to enable list editing</value>
  </data>
  <data name="CommentText" xml:space="preserve">
    <value>Comment</value>
    <comment>this allows the user to leave behind a text comment [location: rule designer pop up] [designtime]</comment>
  </data>
  <data name="EnterCommentText" xml:space="preserve">
    <value>Enter a Comment</value>
  </data>
  <data name="headerDisplay" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="headerIsDefault" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="headerValue" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="labelAddNewRow" xml:space="preserve">
    <value>(Add fixed list values)</value>
  </data>
  <data name="NoControlSelected" xml:space="preserve">
    <value>No Control Selected</value>
  </data>
</root>